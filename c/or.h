// Generated by Molecule 0.4.1

#include "molecule_builder.h"
#include "molecule_reader.h"

#ifndef OR_H
#define OR_H

#ifdef __cplusplus
#define _CPP_BEGIN extern "C" {
#define _CPP_END }
_CPP_BEGIN
#endif /* __cplusplus */

#include "../deps/ckb-c-stdlib/molecule/blockchain.h"

/*
 * Reader APIs
 */

mol_errno MolReader_OrScripts_verify(const mol_seg_t *, bool);
#define MolReader_OrScripts_length(s) mol_dynvec_length(s)
#define MolReader_OrScripts_get(s, i) mol_dynvec_slice_by_index(s, i)
mol_errno MolReader_OrWitnesses_verify(const mol_seg_t *, bool);
#define MolReader_OrWitnesses_length(s) mol_dynvec_length(s)
#define MolReader_OrWitnesses_get(s, i) mol_dynvec_slice_by_index(s, i)

/*
 * Builder APIs
 */

#define MolBuilder_OrScripts_init(b) \
  mol_builder_initialize_with_capacity(b, 1024, 64)
#define MolBuilder_OrScripts_push(b, p, l) mol_dynvec_builder_push(b, p, l)
#define MolBuilder_OrScripts_build(b) mol_dynvec_builder_finalize(b)
#define MolBuilder_OrScripts_clear(b) mol_builder_discard(b)
#define MolBuilder_OrWitnesses_init(b) \
  mol_builder_initialize_with_capacity(b, 64, 64)
#define MolBuilder_OrWitnesses_push(b, p, l) mol_dynvec_builder_push(b, p, l)
#define MolBuilder_OrWitnesses_build(b) mol_dynvec_builder_finalize(b)
#define MolBuilder_OrWitnesses_clear(b) mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

const uint8_t MolDefault_OrScripts[4] = {0x04, ____, ____, ____};
const uint8_t MolDefault_OrWitnesses[4] = {0x04, ____, ____, ____};

#undef ____

/*
 * Reader Functions
 */

mol_errno MolReader_OrScripts_verify(const mol_seg_t *input, bool compatible) {
  if (input->size < MOL_NUM_T_SIZE) {
    return MOL_ERR_HEADER;
  }
  uint8_t *ptr = input->ptr;
  mol_num_t total_size = mol_unpack_number(ptr);
  if (input->size != total_size) {
    return MOL_ERR_TOTAL_SIZE;
  }
  if (input->size == MOL_NUM_T_SIZE) {
    return MOL_OK;
  }
  if (input->size < MOL_NUM_T_SIZE * 2) {
    return MOL_ERR_HEADER;
  }
  ptr += MOL_NUM_T_SIZE;
  mol_num_t offset = mol_unpack_number(ptr);
  if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE * 2) {
    return MOL_ERR_OFFSET;
  }
  mol_num_t item_count = offset / 4 - 1;
  if (input->size < MOL_NUM_T_SIZE * (item_count + 1)) {
    return MOL_ERR_HEADER;
  }
  mol_num_t end;
  for (mol_num_t i = 1; i < item_count; i++) {
    ptr += MOL_NUM_T_SIZE;
    end = mol_unpack_number(ptr);
    if (offset > end) {
      return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = end - offset;
    mol_errno errno = MolReader_Script_verify(&inner, compatible);
    if (errno != MOL_OK) {
      return MOL_ERR_DATA;
    }
    offset = end;
  }
  if (offset > total_size) {
    return MOL_ERR_OFFSET;
  }
  mol_seg_t inner;
  inner.ptr = input->ptr + offset;
  inner.size = total_size - offset;
  return MolReader_Script_verify(&inner, compatible);
}
mol_errno MolReader_OrWitnesses_verify(const mol_seg_t *input,
                                       bool compatible) {
  if (input->size < MOL_NUM_T_SIZE) {
    return MOL_ERR_HEADER;
  }
  uint8_t *ptr = input->ptr;
  mol_num_t total_size = mol_unpack_number(ptr);
  if (input->size != total_size) {
    return MOL_ERR_TOTAL_SIZE;
  }
  if (input->size == MOL_NUM_T_SIZE) {
    return MOL_OK;
  }
  if (input->size < MOL_NUM_T_SIZE * 2) {
    return MOL_ERR_HEADER;
  }
  ptr += MOL_NUM_T_SIZE;
  mol_num_t offset = mol_unpack_number(ptr);
  if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE * 2) {
    return MOL_ERR_OFFSET;
  }
  mol_num_t item_count = offset / 4 - 1;
  if (input->size < MOL_NUM_T_SIZE * (item_count + 1)) {
    return MOL_ERR_HEADER;
  }
  mol_num_t end;
  for (mol_num_t i = 1; i < item_count; i++) {
    ptr += MOL_NUM_T_SIZE;
    end = mol_unpack_number(ptr);
    if (offset > end) {
      return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = end - offset;
    mol_errno errno = MolReader_Bytes_verify(&inner, compatible);
    if (errno != MOL_OK) {
      return MOL_ERR_DATA;
    }
    offset = end;
  }
  if (offset > total_size) {
    return MOL_ERR_OFFSET;
  }
  mol_seg_t inner;
  inner.ptr = input->ptr + offset;
  inner.size = total_size - offset;
  return MolReader_Bytes_verify(&inner, compatible);
}

/*
 * Builder Functions
 */

#ifdef __cplusplus
_CPP_END
#undef _CPP_BEGIN
#undef _CPP_END
#endif /* __cplusplus */

#endif /* OR_H */
